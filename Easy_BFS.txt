import heapq

def best_first_search_shortest_path_heuristic(graph, start, goal, heuristic):
    visited = set()
    heap = [(0, start)]
    while heap:
        (cost, node) = heapq.heappop(heap)
        if node not in visited:
            visited.add(node)
            if node == goal:
                return cost
            for next_node, next_cost in graph[node].items():
                h = heuristic[next_node]
                heapq.heappush(heap, (cost + next_cost + h, next_node))
    return float('inf')

graph = {
    'A': {'B': 5, 'C': 3},
    'B': {'D': 6},
    'C': {'D': 9},
    'D': {}
}
heuristic = {
    'A': 10,
    'B': 6,
    'C': 4,
    'D': 0
}
start = 'A'
goal = 'D'
print(best_first_search_shortest_path_heuristic(graph, start, goal, heuristic))